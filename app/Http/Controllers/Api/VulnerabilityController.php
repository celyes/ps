<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\VulnerabilityRequest;
use App\Http\Resources\VulnerabilityResource;
use App\Models\Vulnerability;
use Illuminate\Http\Request;

class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        return VulnerabilityResource::collection(
            $request->get('details')
            ? Vulnerability::orderBy('created_at', 'DESC')->with('aliases', 'affections')->get()
            : Vulnerability::orderBy('created_at', 'DESC')->with('affections')->get()
        );
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(VulnerabilityRequest $request)
    {
        $vulnerability = Vulnerability::create($request->validated());

        // relationships...
        $vulnerability->aliases()->createMany($request->aliases);
        $vulnerability->affections()->createMany($request->affections);

        return new VulnerabilityResource(
            $vulnerability->with('aliases', 'affections')->first()
        );
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function show(Vulnerability $vulnerability)
    {
        return new VulnerabilityResource(
            $vulnerability->load('aliases', 'affections')
        );
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function update(VulnerabilityRequest $request, $id)
    {
        $vulnerability = Vulnerability::where('id', $id)->first() ?? abort(404);
        $vulnerability->update($request->safe()->only(['title', 'score', 'published', 'modified', 'summary', 'description']));

        // relations...
        if ($request->has('aliases')) {
            $vulnerability->aliases()->each(fn ($alias, $key) => $alias->update($request->aliases[$key]));
        }

        if ($request->has('affections')) {
            $vulnerability->affections()->each(fn ($affection, $key) => $affection->update($request->affections[$key]));
        }

        return new VulnerabilityResource(
            $vulnerability->load('aliases', 'affections')
        );
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        if (Vulnerability::destroy($id)) {
            return response()->json(['message' => 'vulnerability deleted succesfully']);
        }
        abort(404);
    }
}
